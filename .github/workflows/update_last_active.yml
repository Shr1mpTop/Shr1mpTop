name: Update Last Active Badge

on:
  schedule:
    # 每小时运行一次
    - cron: '0 * * * *'
  workflow_dispatch: # 允许手动触发

jobs:
  update-gist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Update Gist with cache busting
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 使用更底层的 github.request 方法，并添加 http headers 来禁用缓存
            const response = await github.request('GET /users/{username}/events', {
              username: 'Shr1mpTop',
              per_page: 100,
              headers: {
                'X-GitHub-Api-Version': '2022-11-28',
                'Cache-Control': 'no-cache'
              }
            });

            console.log(`获取到了 ${response.data.length} 条公开活动...`);
            if (response.data.length > 0) {
              console.log(`最新的活动是: ${response.data[0].type}, 创建于: ${response.data[0].created_at}`);
            }

            const pushEvent = response.data.find(event => event.type === 'PushEvent');
            let lastActiveDate = 'never';
            let color = 'inactive';

            if (pushEvent) {
              console.log(`找到了最新的 PushEvent，发生于: ${pushEvent.created_at}`);
              const eventDate = new Date(pushEvent.created_at);
              const now = new Date();
              const diffTime = Math.abs(now - eventDate);
              const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));

              if (diffDays === 0) {
                lastActiveDate = 'today';
              } else if (diffDays === 1) {
                lastActiveDate = 'yesterday';
              } else {
                lastActiveDate = `${diffDays} days ago`;
              }
              color = "4B5563";
            } else {
              console.log("在返回的活动中没有找到任何 PushEvent。");
            }

            const gistData = {
              "schemaVersion": 1,
              "label": "Last Active",
              "message": lastActiveDate,
              "color": color
            };

            const gistId = '${{ secrets.GIST_ID }}';
            const gistToken = '${{ secrets.GIST_TOKEN }}';
            
            if (!gistId || !gistToken) {
              throw new Error('GIST_ID or GIST_TOKEN is not set in secrets');
            }

            await fetch(`https://api.github.com/gists/${gistId}`, {
              method: 'PATCH',
              headers: {
                'Authorization': `token ${gistToken}`,
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                files: {
                  'last_active.json': {
                    content: JSON.stringify(gistData)
                  }
                }
              })
            });
